name: Bot Deployment

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allow manual triggering
  schedule:
    - cron: '0 */6 * * *' # Run every 6 hours to ensure uptime

env:
  REGISTRY: ghcr.io
  REPO_NAME: guardianangelww/summarizer4
  CURRENT_DATE: "2025-04-27 10:02:59"  # Updated to current UTC time
  CURRENT_USER: "GuardianAngelWw"      # Updated to current username

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
      - name: Build Info
        run: |
          echo "Build started by: ${{ env.CURRENT_USER }}"
          echo "Build date: ${{ env.CURRENT_DATE }}"

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          output: 'trivy-results.txt'
          severity: 'CRITICAL,HIGH'
          timeout: '10m'
          scanners: 'vuln'

      - name: Store Trivy scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results
          path: trivy-results.txt
          retention-days: 5

# ... (previous configuration remains the same until run-bot job)

  run-bot:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule')
    
    timeout-minutes: 340

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt psutil pytz  # Added psutil for memory monitoring

      - name: Create logs directory
        run: mkdir -p logs

      - name: Run bot with monitoring
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          ADMIN_USER_IDS: ${{ secrets.ADMIN_USER_IDS }}
          PYTHONUNBUFFERED: 1
          GITHUB_WORKFLOW_RUN: ${{ github.run_id }}
          GITHUB_WORKFLOW_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          # Function to send notification using curl
          send_notification() {
            local status="$1"
            local message="$2"
            curl -s -X POST \
              "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \
              -d "chat_id=${ADMIN_USER_IDS%%,*}" \
              -d "text=ü§ñ Workflow Update ü§ñ%0A%0AStatus: ${status}%0A${message}%0A%0AWorkflow: ${GITHUB_WORKFLOW_URL}" \
              -d "parse_mode=HTML"
          }

          # Send startup notification
          send_notification "Starting ‚ñ∂Ô∏è" "Bot is being initialized..."

          # Monitor and run bot
          {
            python ollama_telegram_bot.py &
            BOT_PID=$!
            
            # Wait for bot to start
            sleep 10
            
            # Monitor bot process
            while true; do
              if ! ps -p $BOT_PID > /dev/null; then
                send_notification "Warning ‚ö†Ô∏è" "Bot process died, restarting..."
                python ollama_telegram_bot.py &
                BOT_PID=$!
                sleep 10
              fi
              
              if ! curl -sf http://localhost:8080/health >/dev/null 2>&1; then
                send_notification "Warning ‚ö†Ô∏è" "Health check failed, restarting bot..."
                kill $BOT_PID 2>/dev/null || true
                python ollama_telegram_bot.py &
                BOT_PID=$!
                sleep 10
              fi
              
              sleep 30
            done
          } 2>&1 | tee -a logs/bot.log

      - name: Send shutdown notification
        if: always()
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          ADMIN_USER_IDS: ${{ secrets.ADMIN_USER_IDS }}
        run: |
          curl -s -X POST \
            "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \
            -d "chat_id=${ADMIN_USER_IDS%%,*}" \
            -d "text=ü§ñ Workflow Update ü§ñ%0A%0AStatus: Stopped ‚èπÔ∏è%0ATime: $(date -u +'%Y-%m-%d %H:%M:%S')%0A%0AWorkflow: ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}" \
            -d "parse_mode=HTML"

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bot-logs
          path: logs/
          retention-days: 5
