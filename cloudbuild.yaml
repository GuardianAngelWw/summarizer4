steps:
# Enable required services
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: bash
  args:
  - '-c'
  - |
    gcloud services enable cloudbuild.googleapis.com
    gcloud services enable run.googleapis.com
    gcloud services enable secretmanager.googleapis.com
    gcloud services enable firestore.googleapis.com
    gcloud services enable artifactregistry.googleapis.com
    
    # Create Firestore database if it doesn't exist
    if ! gcloud firestore databases describe --quiet 2>/dev/null; then
      echo "Creating Firestore database..."
      gcloud firestore databases create --region=us-central1 --quiet || true
    fi
    
    # Create secrets if they don't exist
    if ! gcloud secrets describe telegram-bot-token 2>/dev/null; then
      echo "Please create secrets first using:"
      echo "gcloud secrets create telegram-bot-token --replication-policy=automatic"
      echo "gcloud secrets create groq-api-key --replication-policy=automatic"
      echo "gcloud secrets create admin-user-ids --replication-policy=automatic"
      echo "Then add values using:"
      echo "gcloud secrets versions add telegram-bot-token --data-file=/path/to/token.txt"
      exit 1
    fi
    
    # Create a service account if it doesn't exist
    if ! gcloud iam service-accounts describe telegram-bot-sa@$PROJECT_ID.iam.gserviceaccount.com 2>/dev/null; then
      echo "Creating service account..."
      gcloud iam service-accounts create telegram-bot-sa --display-name="Telegram Bot Service Account"
      
      # Grant permissions
      gcloud projects add-iam-policy-binding $PROJECT_ID \
        --member="serviceAccount:telegram-bot-sa@$PROJECT_ID.iam.gserviceaccount.com" \
        --role="roles/datastore.user"
      
      gcloud projects add-iam-policy-binding $PROJECT_ID \
        --member="serviceAccount:telegram-bot-sa@$PROJECT_ID.iam.gserviceaccount.com" \
        --role="roles/secretmanager.secretAccessor"
    fi

# Build the container image
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'gcr.io/$PROJECT_ID/telegram-bot:$COMMIT_SHA', '.']

# Push the container image to Container Registry
- name: 'gcr.io/cloud-builders/docker'
  args: ['push', 'gcr.io/$PROJECT_ID/telegram-bot:$COMMIT_SHA']

# Deploy container image to Cloud Run
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: gcloud
  args:
  - 'run'
  - 'deploy'
  - 'telegram-bot'
  - '--image'
  - 'gcr.io/$PROJECT_ID/telegram-bot:$COMMIT_SHA'
  - '--region'
  - 'us-central1'
  - '--platform'
  - 'managed'
  - '--allow-unauthenticated'
  - '--memory'
  - '256Mi'
  - '--cpu'
  - '1'
  - '--max-instances'
  - '1'
  - '--service-account'
  - 'telegram-bot-sa@$PROJECT_ID.iam.gserviceaccount.com'
  - '--set-secrets'
  - 'BOT_TOKEN=telegram-bot-token:latest,GROQ_API_KEY=groq-api-key:latest,ADMIN_USER_IDS=admin-user-ids:latest'

# Update the service with the webhook URL
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: gcloud
  args:
  - 'run'
  - 'services'
  - 'update'
  - 'telegram-bot'
  - '--platform'
  - 'managed'
  - '--region'
  - 'us-central1'
  - '--set-env-vars'
  - 'WEBHOOK_URL=https://telegram-bot-$PROJECT_ID.a.run.app'

# Set the webhook in Telegram
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: bash
  args:
  - '-c'
  - |
    # Get the Cloud Run URL
    CLOUD_RUN_URL=$(gcloud run services describe telegram-bot --platform managed --region us-central1 --format 'value(status.url)')
    
    # Get bot token from Secret Manager
    BOT_TOKEN=$(gcloud secrets versions access latest --secret="telegram-bot-token")
    
    # Set webhook URL in Telegram
    curl -X POST "https://api.telegram.org/bot$$BOT_TOKEN/setWebhook?url=$$CLOUD_RUN_URL/$$BOT_TOKEN"
    
    echo "Deployment complete! Your bot should now be running on Google Cloud Run."
    echo "Service URL: $$CLOUD_RUN_URL"

images:
- 'gcr.io/$PROJECT_ID/telegram-bot:$COMMIT_SHA'

# Set timeout to 15 minutes (prevents wasteful build time in free tier)
timeout: 900s

# Use a smaller machine type for CI/CD to stay in free tier
options:
  machineType: 'E2_HIGHCPU_2' 